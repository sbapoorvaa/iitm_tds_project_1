from supabase import Client, create_client
from config import SUPABASE_URL, SUPABASE_KEY, PROMPTS_TABLE, RESULTS_TABLE, hash_secret
import uuid

# Initialize Supabase client
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

def insert_task(email, task, round_no, brief):
    data = {
        "email": email,
        "task": task,
        "round": round_no,
        "brief": brief,
        "status": "pending"
    }
    response = supabase.table("tasks").insert(data).execute()
    # supabase-py returns response.data as a list of inserted rows
    if response.data and len(response.data) > 0:
        return response.data[0]["id"]
    return None

def update_task_result(task_id, result):
    try:
        response = supabase.table("tasks").update(
            {"result": result, "status": "completed"}
        ).eq("id", task_id).execute()
    except Exception as e:
        # Network or client-level error
        raise Exception(f"Failed to update task {task_id}: {e}")

    # supabase-py returns a response with .data and possibly .error
    # If there's an error object or no rows were updated, surface it.
    error = getattr(response, "error", None)
    print("Response from Supabase:", response)
    data = getattr(response, "data", None)

    if error:
        raise Exception(f"Supabase error updating task {task_id}: {error}")

    if not data or len(data) == 0:
        raise Exception(f"No task updated for id {task_id}. Response: {response}")

    # Return the updated row for convenience
    return data[0]

def get_task(task_id):
    response = supabase.table("tasks").select("*").eq("id", task_id).execute()
    if response.data and len(response.data) > 0:
        return response.data[0]
    return None

# Check if nonce is unique
def is_nonce_unique(nonce: str):
    response = supabase.table(PROMPTS_TABLE).select("*").eq("nonce", nonce).execute()
    return not (response.data and len(response.data) > 0)

def insert_prompt(email: str, name: str, secret: str, task: str, round_no: int, nonce: str, brief: str,
                  checks: list = None, evaluation_url: str = None, attachments: dict = None):
    if not is_nonce_unique(nonce):
        raise Exception(f"Nonce {nonce} already exists!")

    data = {
        "email": email,
        "name": name,
        "secret": hash_secret(secret),
        "task": task,
        "round": round_no,
        "nonce": nonce,
        "brief": brief,
        "checks": checks or [],
        "evaluation_url": evaluation_url,
        "attachments": attachments or {},
        "status": "pending"
    }
    response = supabase.table(PROMPTS_TABLE).insert(data).execute()
    
    if not response.data or len(response.data) == 0:
        raise Exception(f"Failed to insert prompt: {response}")
    
    # Step 2: Get the auto-generated id and assign it to task_id
    row = response.data[0]
    task_id = row["id"]  # auto-generated by Supabase/Postgres

    # Step 3: Update the row with task_id = id
    supabase.table(PROMPTS_TABLE).update({"task_id": task_id}).eq("id", task_id).execute()

    row["task_id"] = task_id
    return row

"""
def update_prompt_result(task_id: str, result: dict):
    print("Updating prompt result for task_id:", task_id, "with result:", result)
    response = supabase.table(PROMPTS_TABLE).update(result).eq("task_id", task_id).execute()  # this is the problem, as of now
    print("Update prompt result response:", response)
    if not response.data or len(response.data) == 0:
        raise Exception(f"No prompt updated for task_id {task_id}. Response: {response}")
    return response.data[0]
"""

def update_prompt_result(task_id: int, result: dict):
    """Update prompts table after evaluation"""
    update_data = {}
    # only include keys that exist in your Supabase schema
    for key in ["status"]:  # remove score, feedback
        if key in result and result[key] is not None:
            update_data[key] = result[key]

    if not update_data:
        return None

    response = supabase.table(PROMPTS_TABLE).update(update_data).eq("task_id", task_id).execute()
    return response.data if response.data else None

def insert_result(task_id: int = None, email: str = None, task: str = None, round_no: int = None, nonce: str = None,
                  repo_url: str = None, commit_sha: str = None, pages_url: str = None,
                  files: dict = None, evaluation_url: str = None,score: float = None,
                  feedback: str = None):
    # Determine the prompt row
    if task_id:
        prompt_row = get_prompt(task_id=task_id)
        if not prompt_row:
            raise Exception(f"No prompt found with task_id {task_id}")
        # Use values from prompt if missing
        email = email or prompt_row.get("email")
        task = task or prompt_row.get("task")
        nonce = nonce or prompt_row.get("nonce")
    elif nonce:
        prompt_row = get_prompt(nonce=nonce)
        if not prompt_row:
            raise Exception(f"No prompt found with nonce {nonce}")
        task_id = prompt_row.get("task_id")
        email = email or prompt_row.get("email")
        task = task or prompt_row.get("task")
        nonce = nonce or prompt_row.get("nonce")
    else:
        raise Exception("Must provide task_id or nonce to insert result")

    data = {
        "task_id": task_id,
        "email": email,
        "task": task,
        "round": round_no,
        "nonce": nonce,
        "repo_url": repo_url,
        "commit_sha": commit_sha,
        "pages_url": pages_url,
        "status": "completed",
        "evaluation_url": evaluation_url or None,
        **({"files": files} if files else {})

    }

    response = supabase.table(RESULTS_TABLE).insert(data).execute()
    if not response.data or len(response.data) == 0:
        raise Exception(f"Failed to insert result for task_id {task_id}")
    
    return response.data[0]



def get_prompt(task_id: str = None, nonce: str = None):
    query = supabase.table(PROMPTS_TABLE).select("*")
    if task_id:
        query = query.eq("task_id", task_id)
    elif nonce:
        query = query.eq("nonce", nonce)
    else:
        raise ValueError("Must provide task_id or nonce")
    
    response = query.execute()
    if response.data and len(response.data) > 0:
        return response.data[0]
    return None

# --- New helper for Round 2 validation ---
def get_result_by_repo_url(repo_url: str, round_no: int = None):
    query = supabase.table(RESULTS_TABLE).select("*").eq("repo_url", repo_url)
    if round_no:
        query = query.eq("round", round_no)
    response = query.execute()
    if response.data and len(response.data) > 0:
        return response.data[0]
    return None

def get_prompt_by_repo_url(repo_url, round_no=None):
    query = supabase.table("prompts").select("*").eq("repo_url", repo_url)
    if round_no:
        query = query.eq("round", round_no)
    response = query.execute()
    if response.data and len(response.data) > 0:
        return response.data[0]
    return None
